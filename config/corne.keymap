/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* inspired from https://github.com/jporter-dev/zmk-config?tab=readme-ov-file
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&hm RGUI SEMI>, <&kp SQT>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LCTRL TAB>, <&kp ESC>;
        };

        qtab: qtab {
            compatible = "zmk,behavior-tap-dance";
            label = "QTAB";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp Q>, <&kp TAB>;
        };

        altesc: altesc {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTESC";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LEFT_ALT>, <&kp ESCAPE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_cword {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&caps_word>;
        };

        combo_vimwq {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&vim_quit>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <38 17>;
        };

        shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <1 2 3>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <2 3 4>;
        };

        windows {
            bindings = <&kp LEFT_GUI>;
            key-positions = <38 5>;
        };

        ctrltab {
            bindings = <&kp LC(TAB)>;
            key-positions = <3 4 5>;
        };

        prnt {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <15 16 17>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <38 25>;
        };

        ctrlc {
            bindings = <&kp K_COPY>;
            key-positions = <38 13>;
        };
    };

    macros {
        vim_quit: vim_quit {
            label = "ZM_vim_quit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESC &kp COLON &kp W &kp Q>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &qtab               &kp W             &kp E        &kp R      &kp T            &kp Y                 &kp U  &kp I      &kp O    &kp P              &none
&none  &kp A               &hm LS(S) S       &kp D        &kp F      &kp G            &kp H                 &kp J  &kp K      &kp L    &td0               &none
&none  &hm LEFT_CONTROL Z  &hm LEFT_SHIFT X  &hm LC(C) C  &kp V      &kp B            &kp N                 &kp M  &kp COMMA  &kp DOT  &hm QUESTION FSLH  &none
                                             &altesc      &kp SPACE  &kp BACKSPACE    &hm LEFT_SHIFT ENTER  &mo 1  &mo 2
            >;
        };

        num_layer {
            bindings = <
&none  &none  &none        &kp LC(TAB)     &kp UP_ARROW    &kp PG_UP          &kp PLUS   &kp N7  &kp N8  &kp N9  &kp KP_MULTIPLY  &none
&none  &none  &none        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp SLASH        &none
&none  &mo 3  &hm AMPS AT  &kp C_MUTE      &kp C_VOL_DN    &kp C_VOLUME_UP    &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT          &none
                           &altesc         &kp SPACE       &kp BACKSPACE      &kp ENTER  &trans  &mo 2
            >;
        };

        sym_layer {
            bindings = <
&none  &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4  &kp N5           &kp NUMBER_6  &kp N7     &kp N8    &kp N9    &kp N0    &none
&none  &none         &trans          &kp GRAVE       &kp TILDE     &none            &kp MINUS     &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &none
&none  &mo 3         &sk LEFT_SHIFT  &none           &none         &none            &kp UNDER     &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &none
                                     &kp LEFT_SHIFT  &kp SPACE     &kp BACKSPACE    &kp ENTER     &mo 1      &trans
            >;
        };

        func_layer {
            bindings = <
&none  &kp F1  &kp F2  &kp F3        &kp F4        &kp F5              &kp F6        &kp F7        &kp F8        &kp F9          &kp F10  &none
&none  &none   &none   &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &none           &kp F11  &none
&none  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2        &bt BT_SEL 3  &bt BT_NXT    &bt BT_CLR    &bt BT_CLR_ALL  &kp F12  &none
                       &sys_reset    &trans        &bootloader         &bootloader   &trans        &trans
            >;
        };
    };
};
